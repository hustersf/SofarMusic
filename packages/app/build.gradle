apply plugin: 'com.android.application'
apply from: rootProject.file('public-xml.gradle')
def config = rootProject.ext.android//配置
def depend = rootProject.ext.deps//依赖
def unitTest = rootProject.ext.unitTest //
android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId "com.sf.sofarmusic"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true

        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //签名信息配置
    signingConfigs {

        myConfig {
            storeFile file("sofarmusic.keystore")
            storePassword "123456"
            keyAlias "sofarmusic"
            keyPassword "123456"
        }

    }

    buildTypes {

        debug {
            signingConfig signingConfigs.myConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.myConfig
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        huidu {
            signingConfig signingConfigs.myConfig
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 3.0gradle 新增type,需要加上这一句，否则编译错误
            matchingFallbacks = ['release', 'debug']
        }
    }

    flavorDimensions "default"
    productFlavors {

        google {
            manifestPlaceholders = [ICON: "@drawable/ic_launcher", LABEL: "@string/app_name"]
            dimension "default"
        }

        xiaomi {
            manifestPlaceholders = [ICON: "@drawable/ic_launcher", LABEL: "@string/app_name"]
            dimension "default"
        }

        huawei {
            manifestPlaceholders = [ICON: "@drawable/ic_launcher", LABEL: "@string/app_name"]
            dimension "default"
        }
    }

    repositories {
        flatDir {
            dirs 'libs'   // aar目录
        }
    }
}

android.applicationVariants.all { variant ->
    String flavor = variant.productFlavors[0].name
    if (flavor == "xiaomi") {
        variant.outputs.each { output ->
            output.processResources.doFirst {
                String rootPath = buildDir.path + "/intermediates/res/merged/${variant.flavorName}/${variant.buildType.name}"
                replaceXiaomiDrawable(rootPath)
            }
        }
    }
}

def replaceXiaomiDrawable(String rootPath) {
    File file = new File(rootPath + "/drawable/layer_splash.xml")
    File xiaomiFile = new File(rootPath + "/drawable/layer_splash_xiaomi_first.xml")
    if (file.exists() && xiaomiFile.exists()) {
        println("小米首发资源替换开始..." + file.path)
        FileInputStream fis = new FileInputStream(xiaomiFile)
        FileOutputStream fos = new FileOutputStream(file)
        byte[] buffer = new byte[fis.available()]
        fis.read(buffer)
        fos.write(buffer)
        fis.close()
        fos.close()
        println("小米首发资源替换结束..." + xiaomiFile.path)
    }
    xiaomiFile.delete()
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation unitTest.junit
    androidTestImplementation unitTest.test_runner
    androidTestImplementation unitTest.test_espresso
    //    compile(name: 'libzxing-release', ext: 'aar')
    debugCompile depend.debugLeakcanary
    releaseCompile depend.releaseLeakcanary
    testCompile depend.testLeakcanary
    compile depend.annotations
    compile depend.supportV7
    compile depend.palette
    compile depend.design
    compile depend.cardview

    implementation depend.play_service_places
    implementation depend.work
    implementation depend.firebase_jobdispatcher
    implementation depend.greendao

    implementation project(':framework:skin')
    implementation project(':framework:network')
    implementation project(':external:zxing')
    implementation project(':framework:player')
    implementation project(':framework:utility')
    implementation project(':framework:widget')
    implementation project(':core:base')
    implementation project(':external:demo')
}
